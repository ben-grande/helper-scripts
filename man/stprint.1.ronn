stprint(1) -- Sanitize text to be safely printed to the terminal
=================================================================

<!--
# Copyright (C) 2025 Benjamin Grande M. S. <ben.grande.b@gmail.com>
# Copyright (C) 2025 ENCRYPTED SUPPORT LLC <adrelanos@whonix.org>
# See the file COPYING for copying conditions.
-->

## SYNOPSIS

`stprint [TEXT...]`

## DESCRIPTION

`stprint` is a tool to safely print text from untrusted sources
sanitizing non-ASCII characters and dangerous ANSI escape sequenes, from
the latter, only a strict subset of Select Graphic Rendition attributes,
line feeds (`\n`) and horizontal tabs (`\t`) are allowed).

Every parameter is treated as text to be printed. If no parameter is
provided, standard input will be opened for reading.

There are no options, thefore `--` is interpreted as text and not end of
options.

## RETURN VALUES

* `0` Successfully printed text.
* Any other return value is a bug.

## EXAMPLE

Print a variable value is simple:

<code>
stprint "${untrusted_string}"
</code>

Note that items are joined without word-splitting (no space separation):

<code>
stprint "${untrusted_string}" "${another_untrusted_string}"
</code>

To have space separated items, simply add a space between them:

<code>
stprint "${untrusted_string} ${another_untrusted_string}"<br>
stprint "${untrusted_string}" " ${another_untrusted_string}"
</code>

Print with heredoc to avoid quoting problems:

<code>
stprint &lt;&lt;EOF<br>
${untrusted_string}<br>
EOF
</code>

### EXAMPLES WITH COMMANDS AND FILES

Print stdout and stderr of a command:

<code>
untrusted-cmd 2>&1 | stprint<br>
# Or with Bash/Zsh syntax:<br>
stprint &lt; &lt;(untrusted-cmd 2>&1)
</code>

Print ownership readable file with stdin redirection:

<code>
stprint < /untrusted/file < /untrusted/log
</code>

Print a ownership restricted file with external programs:

<code>
sudo -- cat -- /untrusted/log | stprint<br>
# Or with Bash/Zsh syntax:<br>
stprint &lt; &lt;(sudo -- cat -- /untrusted/log)
</code>

Piping to a pager:

<code>
data | stprint | less -R<br>
GIT_PAGER="stprint | less -R" git log
</code>

### EXAMPLES WITH VARIABLES

Print a variable as is (raw):

<code>
var="$(stprint "${untrusted_string}")"<br>
## Or Bash/Zsh syntax:<br>
printf -v var '%s' "$(stprint "${red}Hey${nocolor}: ${untrusted_string}")"<br>
## Raw print:
printf '%s' "${var}"
</code>

Interpret wanted escapes before passing them:

<code>
red="$(printf '%b' "\\033[31m")"<br>
nocolor="$(printf '%b' "\\033[m")"<br>
# Or Bash/Zsh syntax:<br>
red=$"\\033[31m"<br>
nocolor=$"\\033[m"<br>
## Raw assignment:
var="$(stprint "${red}Hey${nocolor}: ${untrusted_string}")"
</code>

### EXAMPLES OF MISUSE

*Warning*: Reinterpreting the escapes from the data returned from
`stprint` is insecure. Stacks of escaped escapes sequences not
interpreted before will be evaluated.

Do *NOT* reinterpret the escape sequences on variable assignment (dangerous
when printing to the terminal later:

<code>
var="$(stprint "${untrusted_string}")" # OK<br>
# Or with Bash/Zsh syntax:<br>
printf -v var "$(stprint "${untrusted_string}")" # DANGER (format is '%b')<br>
printf -v var '%b' "$(stprint "${untrusted_string}")" # DANGER
</code>

Do *NOT* reinterpret the escape sequences when printing a variable, one
more layer of escapes will be interpreted:

<code>
var="$(stprint "${untrusted_string}")" # OK<br>
printf "${var}" # DANGER (format is '%b')<br>
printf '%b' "${var}" # DANGER<br>
echo -e "${var}" # DANGER<br>
echo "${var}" # DANGER (may default to use '-e')<br>
echo -E "${var}" # DANGER (var may have '-e' prefix)
</code>

## AUTHOR

This man page has been written by Benjamin Grand M. S.
(ben.grande.b@gmail.com).
